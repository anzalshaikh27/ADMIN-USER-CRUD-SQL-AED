/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.CreateUser;
import model.UserHistory;

/**
 *
 * @author anzal
 */
public class ViewUserJPanel extends javax.swing.JPanel {

    Connection con;
    ResultSet rs;
    PreparedStatement pst;
    
    /**
     * Creates new form ViewUserJPanel
     */
   
    
    UserHistory history;
    
    

   // UserAccountHistory historyaccount;
    
    public ViewUserJPanel(UserHistory history) throws SQLException, Exception {
        
            initComponents();
            
            this.history = history;
           // this.historyaccount = historyaccount;
           
           String originalData = "Hello, World!";
        String secretKey = "MySecretKey12345";
        
        // Encrypt the data
        byte[] encryptedData = encrypt(originalData, secretKey);

        // Decrypt the data
        String decryptedData = decrypt(encryptedData, secretKey);
  
            populateTable();
           // populateAccountTable();
           
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CreateUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            con  = DriverManager.getConnection("jdbc:mysql://localhost:3306/assignment2","root","root");
            pst = con.prepareStatement("select * from user");
            
            rs = pst.executeQuery();
        
            if(rs.next()){
                txtFname.setText(rs.getString(2));
                txtLname.setText(rs.getString(3));
                txtNeu.setText(rs.getString(1));
                txtAge.setText(rs.getString(4));
                txtAddress.setText(rs.getString(5));
                txtEmail.setText(rs.getString(6));
                txtPhone.setText(rs.getString(7));
                txtPincode.setText(rs.getString(8));
                txtUsername.setText(rs.getString(9));
                txtPassword.setText(rs.getString(10));
                ComboEnabled.setSelectedItem(rs.getString(11));
                      
            }
        
    }

//     private String encryptPassword(String password) {
//        return ViewUserJPanel.hashPassword(password);
//     }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        btnUpdateUser = new javax.swing.JButton();
        lblNeu = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        txtNeu = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblPincode = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtPincode = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        lblFname = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        lblLname = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblTitlepersonalinfo = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnViewUser = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        ComboEnabled = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("VIEW USER INFORMATION");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NEU ID", "First Name", "Last Name", "Age", "Address", "Email", "Phone", "Pincode", "Username", "Password", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUser);

        btnUpdateUser.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdateUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdateUser.setForeground(new java.awt.Color(204, 255, 255));
        btnUpdateUser.setText("Update User");
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });

        lblNeu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNeu.setText("NEU ID :");

        lblAge.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAge.setText("Age : ");

        lblEmail.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEmail.setText("Email : ");

        lblPhone.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPhone.setText("Phone : ");

        lblPincode.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPincode.setText("Pincode : ");

        lblAddress.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddress.setText("Address : ");

        lblFname.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblFname.setText("First Name :");

        lblLname.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLname.setText("Last Name :");

        lblSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSearch.setText("Search by NEU ID : ");
        lblSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblUsername.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUsername.setText("Username : ");

        lblPassword.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPassword.setText("Password : ");

        lblTitlepersonalinfo.setBackground(new java.awt.Color(255, 255, 255));
        lblTitlepersonalinfo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitlepersonalinfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitlepersonalinfo.setText("USER'S PERSONAL INFORMATION");
        lblTitlepersonalinfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        btnViewUser.setBackground(new java.awt.Color(0, 0, 0));
        btnViewUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnViewUser.setForeground(new java.awt.Color(204, 255, 255));
        btnViewUser.setText("View User Information");
        btnViewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewUserActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblStatus.setText("Status : ");

        ComboEnabled.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enabled", "Disabled" }));
        ComboEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboEnabledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitlepersonalinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblStatus)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblPassword)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblPincode, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblNeu, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblLname, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblFname, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(lblUsername))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtLname)
                                                .addComponent(txtNeu)
                                                .addComponent(txtAge)
                                                .addComponent(txtPincode, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ComboEnabled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtFname, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                                                .addComponent(btnUpdateUser)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(250, 250, 250)
                                .addComponent(btnViewUser))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(260, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAddress, txtAge, txtEmail, txtFname, txtLname, txtNeu, txtPassword, txtPhone, txtPincode, txtUsername});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewUser))
                .addGap(18, 18, 18)
                .addComponent(lblTitlepersonalinfo)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFname)
                    .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLname)
                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNeu)
                    .addComponent(txtNeu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAge)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPincode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPincode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(ComboEnabled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUpdateUser)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAddress, txtAge, txtEmail, txtFname, txtLname, txtNeu, txtPassword, txtPhone, txtPincode, txtUsername});

    }// </editor-fold>//GEN-END:initComponents

    
    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserActionPerformed
        // TODO add your handling code here:
        
       int neu1 = Integer.parseInt(txtNeu.getText());
       String fname1 = txtFname.getText();
       String lname1 = txtLname.getText();
       int age1   = Integer.parseInt(txtAge.getText());
       String address1 = txtAddress.getText();
       String email1 = txtEmail.getText();
       int phone1 = Integer.parseInt(txtPhone.getText());
       int pincode1 = Integer.parseInt(txtPincode.getText());
       String username1 = txtUsername.getText();
       String password1 = txtPassword.getText();
        //String encryptedData = null;
       //String hash1 = new String(encryptedData); 
       String hashedPassword = hash.hashPassword(password1);
       String status = ComboEnabled.getSelectedItem().toString();
        
        CreateUser user2 = new CreateUser();
       user2.setNeu_id(neu1);
       user2.setFname(fname1);
       user2.setLname(lname1);
       user2.setAge(age1);
       user2.setAddress(address1);
       user2.setEmail(email1);
       user2.setPhone(phone1);
       user2.setPincode(pincode1);
       user2.setUsername(username1);
       user2.setPassword(password1);
       user2.setStatus(((String) ComboEnabled.getSelectedItem()).trim());
        
       
       ArrayList<CreateUser> users = history.getHistory();
       
       for(CreateUser user3 : users){
           if(user3.getUsername().equals(username1))
           {
               
        user3.setNeu_id(neu1);
       user3.setFname(fname1);
       user3.setLname(lname1);
       user3.setAge(age1);
       user3.setAddress(address1);
       user3.setEmail(email1);
       user3.setPhone(phone1);
       user3.setPincode(pincode1);
       user3.setUsername(username1);
       user3.setPassword(password1);  
       user3.setStatus(status);
       break;
       }
              
                 }
       
       
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        
        if(tblUser.getSelectedRowCount() == 1){
           
            
            model.setValueAt(neu1,tblUser.getSelectedRow(), 0);
            model.setValueAt(fname1,tblUser.getSelectedRow(), 1);
            model.setValueAt(lname1,tblUser.getSelectedRow(), 2);
            model.setValueAt(age1,tblUser.getSelectedRow(), 3);
            model.setValueAt(address1,tblUser.getSelectedRow(), 4);
            model.setValueAt(email1,tblUser.getSelectedRow(), 5);
            model.setValueAt(phone1,tblUser.getSelectedRow(), 6);
            model.setValueAt(pincode1,tblUser.getSelectedRow(), 7);
            model.setValueAt(username1,tblUser.getSelectedRow(), 8);
            //model.setValueAt(encryptPassword(password1),tblUser.getSelectedRow(), 9);
            model.setValueAt(hashedPassword,tblUser.getSelectedRow(), 9);
            model.setValueAt(status,tblUser.getSelectedRow(), 10);
            
            try {
                pst = con.prepareStatement("update user set neu_id=?,first_name=?,last_name=?,age=?,address=?,email=?,phone=?,pincode=?,username=?,password=?,status=?");
                
                pst.setString(1, txtNeu.getText());
                pst.setString(2, txtFname.getText());
                pst.setString(3, txtLname.getText());
                pst.setString(4, txtAge.getText());
                pst.setString(5, txtAddress.getText());
                pst.setString(6, txtEmail.getText());
                pst.setString(7, txtPhone.getText());
                pst.setString(8, txtPincode.getText());
                pst.setString(9, txtUsername.getText());
                pst.setString(10, txtPassword.getText());
                pst.setString(11, txtUsername.getText());
                
                pst.executeUpdate();
                        
            } catch (SQLException ex) {
                Logger.getLogger(ViewUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            JOptionPane.showMessageDialog(this, "User Information Updated Successfully!!");
            
        }
        else {
                
            if(tblUser.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "Table is empty!!");
            }
            
            
            else {
                JOptionPane.showMessageDialog(this, "Please Select atleast Single Row to Update");
            }
        }
        
        
        /*model.setRowCount(0);
        int i = tblUser.getSelectedRow();
        c
        model.setValueAt(txtFname.getText(), i, 1);
        model.setValueAt(txtLname.getText(), i, 2);
        model.setValueAt(txtAge.getText(), i, 3);
        model.setValueAt(txtAddress.getText(), i, 4);
        model.setValueAt(txtEmail.getText(), i, 5);
        model.setValueAt(txtPhone.getText(), i, 6);
        model.setValueAt(txtPincode.getText(), i, 7);
        */
        
        
    }//GEN-LAST:event_btnUpdateUserActionPerformed

    private void tblUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUserMouseClicked
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        
        String tblNeu = model.getValueAt(tblUser.getSelectedRow(), 0).toString();
        String tblFname = model.getValueAt(tblUser.getSelectedRow(), 1).toString();
        String tblLname = model.getValueAt(tblUser.getSelectedRow(), 2).toString();
        String tblAge = model.getValueAt(tblUser.getSelectedRow(), 3).toString();
        String tblAddress = model.getValueAt(tblUser.getSelectedRow(), 4).toString();
        String tblEmail = model.getValueAt(tblUser.getSelectedRow(), 5).toString();
        String tblPhone = model.getValueAt(tblUser.getSelectedRow(), 6).toString();
        String tblPincode = model.getValueAt(tblUser.getSelectedRow(), 7).toString();
        String tblusername = model.getValueAt(tblUser.getSelectedRow(), 8).toString();
        String tblpassword = model.getValueAt(tblUser.getSelectedRow(), 9).toString();
        String tblstatus = model.getValueAt(tblUser.getSelectedRow(), 10).toString();
        
        txtNeu.setText(tblNeu);
        txtFname.setText(tblFname);
        txtLname.setText(tblLname);
        txtAge.setText(tblAge);
        txtAddress.setText(tblAddress);
        txtEmail.setText(tblEmail);
        txtPhone.setText(tblPhone);
        txtPincode.setText(tblPincode);
        txtUsername.setText(tblusername);
        txtPassword.setText(tblpassword);
        ComboEnabled.setSelectedItem(tblstatus);
        
        
        
    }//GEN-LAST:event_tblUserMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        //DefaultTableModel model1 = (DefaultTableModel) tblAccount.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(model);
        //TableRowSorter<DefaultTableModel> obj1 = new TableRowSorter<>(model1);

        tblUser.setRowSorter(obj);
        //tblAccount.setRowSorter(obj1);

        obj.setRowFilter(RowFilter.regexFilter(txtSearch.getText()));
        
        
        //obj1.setRowFilter(RowFilter.regexFilter(txtSearch.getText()));

    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnViewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewUserActionPerformed
        try {
            // TODO add your handling code here:
            
            con  = DriverManager.getConnection("jdbc:mysql://localhost:3306/assignment2","root","root");
            String query = "select * from user";
            pst = con.prepareStatement(query);
            
            rs = pst.executeQuery(query);
            //ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
            
            /*int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            
            for (int i=0;i<cols;i++){
                colName[i] = rsmd.getColumnName(i+1);
                model.setColumnIdentifiers(colName);
            }*/
            
            while(rs.next()){
                String neu_id = rs.getString(1);
                String first_name = rs.getString(2);
                String last_name = rs.getString(3);
                String age = rs.getString(4);
                String address = rs.getString(5);
                String email = rs.getString(6);
                String phone = rs.getString(7);
                String pincode = rs.getString(8);
                String username = rs.getString(9);
                String password = rs.getString(10);
                String status = rs.getString(11);
                
                String[] row = {neu_id,first_name,last_name,age,address,email,phone,pincode,username,password,status};
                model.addRow(row);
                    
            }
            
          
            
        } catch (SQLException ex) {
            Logger.getLogger(ViewUserJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
        
    }//GEN-LAST:event_btnViewUserActionPerformed

    private void ComboEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboEnabledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboEnabledActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_txtPasswordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboEnabled;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JButton btnViewUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFname;
    private javax.swing.JLabel lblLname;
    private javax.swing.JLabel lblNeu;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPincode;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitlepersonalinfo;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtNeu;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtPincode;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        model.setRowCount(0);
      //  String hashedPassword = hash.hashPassword(password);
        
        
        for(CreateUser cu : history.getHistory()){
            Object[] row = new Object[11];
            
            row[0] = cu.getNeu_id();
            row[1] = cu.getFname();
            row[2] = cu.getLname();
            row[3] = cu.getAge();
            row[4] = cu.getAddress();
            row[5] = cu.getEmail();
            row[6] = cu.getPhone();
            row[7] = cu.getPincode();
            row[8] = cu.getUsername();
            //String encrypt = encryptPassword(cu.getPassword());
            row[9] = cu.getPassword();
            row[10] = cu.getStatus();
            
              
            model.addRow(row);
            
        
        }
            
        }
    
   /* 
    private void populateAccountTable() {
    
        DefaultTableModel model1 = (DefaultTableModel) tblAccount.getModel();
        model1.setRowCount(0);

for(CreateUserAccount ca : historyaccount.getHistoryaccount()){
            Object[] row1 = new Object[2];
            
            row1[0] = ca.getUsername();
            row1[1]  = ca.getPassword();
            
            model1.addRow(row1);
    
}
}*/
   
   
    
    public class hash{
public static String hashPassword(String password) {
        try {
            // Create a MessageDigest instance for the SHA-256 algorithm
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            
            // Add the password bytes to the digest
            md.update(password.getBytes());
            
            // Generate the hashed password bytes
            byte[] hashedPasswordBytes = md.digest();
            
            // Convert the hashed bytes to a Base64-encoded string
            String hashedPassword = Base64.getEncoder().encodeToString(hashedPasswordBytes);
            
            return hashedPassword;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null; // Handle the exception appropriately in your code
        }
    }
   
    
    }
    
    public static byte[] encrypt(String data, String secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), "AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        return cipher.doFinal(data.getBytes());
    }

    public static String decrypt(byte[] encryptedData, String secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), "AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
        byte[] decryptedBytes = cipher.doFinal(encryptedData);
        return new String(decryptedBytes);
    }
    
    
    }

